<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop  
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx  
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"
	default-lazy-init="false">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:applicationContext.properties</value>
		</property>
	</bean>
	<context:component-scan base-package="com.science.*" />

	<!-- 设置destroy-method="close"属性， 保证Spring容器关闭时数据源能够成功释放 -->
	<!-- <bean id="c3p0dataSource" name="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		指定连接数据库的驱动
		<property name="driverClass" value="${jdbc.driver}" />
		指定连接数据库的URL
		<property name="jdbcUrl" value="${jdbc.url}" />
		指定连接数据库的用户名
		<property name="user" value="${jdbc.username}" />
		指定连接数据库的密码
		<property name="password" value="${jdbc.password}" />
		指定连接池中保留的最大连接数. Default:15
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		指定连接池中保留的最小连接数
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		每60秒检查所有连接池中的空闲连接.Default:0
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		如果设为true那么在取得连接的同时将校验连接的有效性。默认为false
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
	</bean> -->
	
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" name="dataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />

    <!-- 配置初始化大小、最小、最大 
    <property name="initialSize" value="1" />
    <property name="minIdle" value="1" /> 
    <property name="maxActive" value="20" />
 
    配置获取连接等待超时的时间
    <property name="maxWait" value="60000" />
 
    配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
 
    配置一个连接在池中最小生存的时间，单位是毫秒
    <property name="minEvictableIdleTimeMillis" value="300000" />
  
    <property name="validationQuery" value="SELECT 'x'" />
    <property name="testWhileIdle" value="true" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />
 
    打开PSCache，并且指定每个连接上PSCache的大小
    <property name="poolPreparedStatements" value="true" />
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
 
    配置监控统计拦截的filters，去掉后监控界面sql无法统计
    <property name="filters" value="stat" /> -->
    </bean>

	<!-- Hibernate自带的数据库连接池数据源配置,使用应用内的jdbc数据库连接池 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	-->
	<!-- LocalSessionFactoryBean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop> 
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- hibernate4配置，与之前版本有不同 -->
				<!--<prop key="cache.use_query_cache">false</prop> <prop key="cache.use_second_level_cache">true</prop> 
					<prop key="cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop> -->
			</props>
		</property>

		<property name="packagesToScan">
			<list>
				<value>com.science.domain</value>
			</list>
		</property>
	</bean>

	<bean id="HtxManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- get方法 事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="HtxManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<!-- <tx:method name="get*" propagation="REQUIRED" read-only="true" /> -->
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="ServiceOperation"
			expression="execution(* com.science.serviceManagerImpl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceOperation" />
	</aop:config>
</beans>